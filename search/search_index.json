{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"A Game Designer's Handbook","text":"<p>HEY! \ud83d\udc4b</p> <p>Note</p> <p>This handbook (at least for now) is for the development side of the course, not the theory.</p> <p>If you're reading this, you likely picked \"L6 Game Design\" as one of your subject choices. If so, then that's awesome!</p> <p>Arguably it's the best class in the whole school. I mean, you spend the year making and playing games! What's not to love? Just remember to take it seriously...</p> <p>That being said, this handbook should contain many of the things you need to know to get started in making games, specifically in  GameMaker Studio.</p> <ul> <li> <p> Essential Resources</p> <p>A collection of articles and documentation that you may find useful while making your game.</p> <p> View Resources</p> </li> <li> <p> Tutorials</p> <p>Get started making simple games, and learn the fundamentals of GameMaker and GML.</p> <p> Get started</p> </li> <li> <p> Example Game</p> <p>Read the source code of the game I made: Placeholder! (Yes, that is actually the name)</p> <p> View Source</p> </li> <li> <p> Random Rambles</p> <p>Randomly related rambles that are somewhat interesting.</p> <p> Go Crazy</p> </li> </ul> <p>You can view the source of this handbook on  GitHub</p>"},{"location":"essentials/","title":"Essentials","text":"<p>Thought you might find these useful :)</p>"},{"location":"essentials/#articles","title":"Articles","text":"<ul> <li> <p> Documenting Your Code</p> <p>Sure, you can write comments in your code. But what if those comments could be even more useful?</p> <p> Read</p> </li> <li> <p> The Semi-colon Problem</p> <p>A programming language either requires them, or despises them.  GameMaker Studio doesn't seem picky</p> <p> Read</p> </li> </ul>"},{"location":"essentials/#gml-best-practice","title":"GML Best Practice","text":"<ul> <li> <p> Variables</p> <p>Feather likes to complain about them...</p> <p> Read</p> </li> </ul>"},{"location":"essentials/#external-resources","title":"External Resources","text":"<ul> <li> <p> GameMaker Manual </p> </li> <li> <p> GameMaker Tutorials </p> </li> </ul>"},{"location":"essentials/docs/","title":"Documenting your Code","text":"<p>There might be a right way</p> <p>It's important to know what you're doing. It's good practice to comment your code so you can look back and ask yourself: \"Why did I do that?\" (Believe me, trying to understand past me's code without comments is impossible)</p>"},{"location":"essentials/docs/#functions","title":"Functions","text":"<p>If you took N5 or Higher computing, and did any work with Javascript, you may have noticed that GML looks a lot like it. This is true even for documentation:  GameMaker Studio uses  JSDoc, or at least parts of it.</p> simple_math.gml<pre><code>/// @function           add()\n/// @description        Adds two numbers.\n/// @param {Real}   _a  The first number.\n/// @param {Real}   _b  The second number.\n/// @returns {Real} \nfunction add(_a, _b) {\n    return _a + _b;\n}\n</code></pre> <p>You, probably</p> <p>But why would I write all that, when a simple sentence would be enough?</p> <p>That's just it. We arn't writing these for you! We write them like this so that the engine can read them.</p> <p> GameMaker Studio will take these lines and generate documentation for you. Said documentation shows up in the editor to make your life easier:</p> <ul> <li>Shows parameter names at the bottom of the code editor box, to keep you on track</li> <li>Full documentation when you hover over a function with your mouse</li> <li> Feather uses the data to force parameter types.</li> </ul> <p>As far as i've seen, these rules only apply to functions and constructors (arguably still functions).</p> <p>The <code>@function</code> tag tells  Feather that this is a function.  Note that this tag isn't required for the documentation to be generated, but just gives a hint.</p> <pre><code>/// @function           add()\n/// @description        Adds two numbers.\n/// @param {Real}   _a  The first value.\n/// @param {Real}   _b  The second value.\n/// @returns {Real}\nfunction add(_a, _b) {\n    return _a + _b;\n}\n</code></pre> <p>The <code>@description</code> tag allows you to provide... well, a description for the function.</p> <pre><code>/// @function           add()\n/// @description        Adds two numbers.\n/// @param {Real}   _a  The first value.\n/// @param {Real}   _b  The second value.\n/// @returns {Real}\nfunction add(_a, _b) {\n    return _a + _b;\n}\n</code></pre> <p>The <code>@param</code> tag allows you to provide the correct names and types of your function's parameters. It also allows you to include a small description of said parameter. The type of a parameter is included in the  curly brackets. A list of valid types can be found in the  GameMaker Studio Manual, or in this forum post from 2022.</p> <pre><code>/// @function           add()\n/// @description        Adds two numbers.\n/// @param {Real}   _a  The first value.\n/// @param {Real}   _b  The second value.\n/// @returns {Real}\nfunction add(_a, _b) {\n    return _a + _b;\n}\n</code></pre> <p>The <code>@returns</code> tag allows you to provide the type of return value. It's that simple. <code>@return</code> is also supported.</p> <pre><code>/// @function           add()\n/// @description        Adds two numbers.\n/// @param {Real}   _a  The first value.\n/// @param {Real}   _b  The second value.\n/// @returns {Real}\nfunction add(_a, _b) {\n    return _a + _b;\n}\n</code></pre>"},{"location":"essentials/semicolon/","title":"The Semi-Colon Problem","text":"<p>what the?</p>"},{"location":"essentials/variables/","title":"Best Practice: Variables","text":"<p>If you're on this site at all, I'm sure you know what a variable is. They store data!</p> <p>Different languages have different ways of declaring them. Here are a few examples</p> PythonJavascriptC++Dart <pre><code># you can just say that x = y and a variable will be created:\nx = 10\ny = \"Snake!\"\n</code></pre> <pre><code>// both var and let declare variables that you can change\nvar x = 10;\nlet y = \"Not Java\"; // it's best practice to use let instead\n\n// const declares a value that you cannot change later, hence the name\nconst z = 10;\n</code></pre> <pre><code>// in C++, you use the variable type as the declaration\nint x = 15;\nbool y = true;\n</code></pre> <pre><code>// dart is very similar to C++. The type is the declaration\nint x = 10;\nString y = \"Flutter? I hardly know her!\";\nArray&lt;int&gt; z = [1, 2, 3];\n</code></pre> <p>However,  GameMaker Language is a little different. There are 3 ways of declaring variables.</p>"},{"location":"essentials/variables/#global-variables","title":"Global Variables","text":"<p>Of course, you can declare a <code>global</code> variable using the <code>global</code> keyword. This will make the variable available to every object after it has been declared.</p> obj_game &gt; Create<pre><code>global.kills = 0\nglobal.player_name = \"Neil\"\nglobal.ammo = 60\n</code></pre> obj_player &gt; Step<pre><code>if global.ammo &gt; 0 {\n    shoot_enemy() // pretend this does something...\n}\n</code></pre> <p>Note</p> <p>It's best to declare <code>global</code> variables at the start of your game. Such as in the <code>Create</code> event of an object that it spawned first thing. This avoids potential issues if you try to call a <code>global</code> variable before it has been assigned.</p>"},{"location":"rambles/","title":"Rambles of a Mad Man","text":"<p>This is a mixed bag of things. My rambles about different programming things. Most here are on topic with  GameMaker Studio though.</p> <ul> <li> <p> The Time and Place for Vectors</p> <p> GameMaker Studio doesn't ship with vector types, but we can make our own!</p> <p> Read</p> </li> </ul>"},{"location":"rambles/vectors/","title":"The  and  for Vectors","text":"<p>Note</p> <p>This ramble is exclusive to  GameMaker Studio. I'd recommend doing your own research before applying any of this to any other project.</p> <p>If you've ever seen or used another game engine, such as  Godot, You may have noticed that  GameMaker Studio lacks the familiar vector type.</p> <p>In most cases, this is fine. Objects provide <code>x</code> and <code>y</code> variables for their positions anyway.</p> <p>HOWEVER!</p> <p>If you find yourself doing something more complex, such as making your game's UI reactive. Where the positions of different elements change quite a lot. You might miss them.</p> <p>Creating your own makeshift vectors can be done a number of ways in  GameMaker Studio.</p>"},{"location":"rambles/vectors/#examples","title":"Examples","text":"Method Rating Arrays Structs Constructor ArraysStructsConstructor <pre><code>// I don't think I need to explain lists\nposition = [10, 10];\n\nx = position[0];\ny = position[1];\n\nmagnitude = sqrt(power(position[0], 2) + power(position[1], 2));\n</code></pre> <pre><code>// structs look a little like Python dictionaries\n// or JSON data, if you're familiar\nposition = {x: 10, y: 10};\n\n// we can then access the named values like this\nx = position.x;\ny = position.y;\n\nmagnitude = sqrt(power(position.x, 2) + power(position.y, 2));\n</code></pre> vector2.gml<pre><code>// this usually goes in it's own script file\nfunction Vec2(_x=0, _y=0) constructor {\n    x = _x;\n    y = _y;\n\n    static mag = function() {\n        return sqrt(power(x, 2) + power(x, 2));\n    }\n}\n</code></pre> Somewhere Else<pre><code>// then in our code, we can call the constructor to give us a struct\nposition = new Vec2(10, 10);\n\n// constructors return a pre-made struct\n// so we can use them just the same\nx = position.x;\ny = position.y;\n\nmagnitude = position.mag();\n</code></pre> <p>Warning</p> <p>There is a lot you can do to get close to a proper vector system in  GameMaker Studio. However, it will never be perfect due to the engine's limitations.</p> <p>All three of these methods will work just fine for any of your projects, but constructors are closers to what you'd find in  Godot. Constructors also have their own type that can be used in documentation. (See  Documenting Your Code)</p> <p>Structs and Constructors also allow you to include functions, like we just did for <code>Vec2().magnitude()</code>.</p> <p>Personally, I prefer using Constructors, but it's up to you what you decide to use. Remember that there isn't anything wrong with just using a few well named variables. Objects still use separate <code>x</code> and <code>y</code> variables, so it's a good idea to follow that when doing player position, for example.</p>"},{"location":"showcase/","title":"Game Showcase","text":"<p>  #TODO: Write intro for Showcase section without sounding like an asshole</p> <p>Card Specification</p>"},{"location":"showcase/#2024-25","title":"2024-25","text":"<ul> <li> <p>Creator: Noah Albrock</p> <p> View Game</p> </li> <li> <p></p> <p>Creator: Hamish Dowie</p> <p> View Game</p> </li> <li> <p></p> <p>Creator: Leon Spence</p> <p> View Game</p> </li> </ul>"},{"location":"showcase/#2025-26","title":"2025-26","text":"<p>Put next year's class here!</p> <p>More to come...</p>"},{"location":"showcase/2425/placeholdergame/","title":"PlaceholderGame","text":""},{"location":"tutorials/","title":"Tutorials","text":"<p>Hit the ground running and try some of these tutorials!</p> <ul> <li> <p> Shape Shooter</p> <p>Learn how to make your own \"Asteroids\" style arcade game in this beginner tutorial </p> <p>Difficulty: </p> <p> Read</p> </li> </ul>"},{"location":"tutorials/#online","title":"Online","text":"<ul> <li> GameMaker Tutorials </li> </ul>"},{"location":"tutorials/#official","title":"Official","text":"<p>You should have a paper copy of these in your classroom.</p> <ul> <li> <p> My First Arena Shooter | GML</p> <p>This tutorial will take you through the process of creating a small game using  GameMaker Studio 2.</p> <p>Go to Tutorial  or grab a  booklet</p> </li> <li> <p> Space Rocks | GML</p> <p>This tutorial will take you through the process of creating a small game using  GameMaker Studio 2, with the aim to get you familiarised with the interface and the work flow.</p> <p>Go to Tutorial  or grab a  booklet</p> </li> <li> <p> Breakthrough | GML</p> <p>This tutorial is designed to get you up and running using  GameMaker Studio 2 in as short a time as possible and will take you through the steps required to make a \"breakout\" style game.</p> <p>Go to Tutorial  or grab a  booklet</p> </li> </ul>"},{"location":"tutorials/#more-advanced","title":"More Advanced","text":"<ul> <li> <p> Your First Platformer</p> <p>Let's create a game together! It's going to be a simple platform game where you have to dodge spikes and reach the flag!</p> <p>Go to Tutorial </p> </li> <li> <p> Make a Sprawling Adventure Game</p> <p>Welcome to Little Town - a major new tutorial for GameMaker Studio 2. The following tutorial provides an introduction to the principles of game development using  GameMaker...</p> <p>Go to Tutorial </p> </li> </ul>"},{"location":"tutorials/shape_shooter/","title":"Shape Shooter","text":"<p>Let's create your own version of \"Asteroids\" in  GameMaker Studio</p>"},{"location":"tutorials/shape_shooter/#briefing","title":"Briefing","text":"<p>We are going to create this game in three simple steps:</p> <ol> <li>Making the player (ship) move</li> <li>Make the asteroids explode</li> <li>Finishing touches</li> </ol> <p>Now let's get to work!</p>"},{"location":"tutorials/shape_shooter/step1/","title":"Step 1: Creating a New Project","text":"<p>Open  GameMaker Studio and click on the \"New\" button</p> <p></p> <p>You can select a template here, but we're going to create a blank project.</p> <p>Enter a name for your project (I went for \"ShapeShooter\"), and hit \"Let's Go!\"</p> <p></p> <p>You can also set the path to your project here. For this tutorial, you don't need to, but you can if you want to.</p>"},{"location":"tutorials/shape_shooter/step2/","title":"Step 2: Sprites and Objects","text":"<p>Before we can write any code, we need to make some art for the player, and the shapes we're gonna shoot.</p>"},{"location":"tutorials/shape_shooter/step2/#creating-sprites","title":"Creating Sprites","text":"<p>Right-click on the \"sprites\" folder in the Asset Browser on the left side of the screen. Then select \"Create &gt; Sprite\"</p> <p></p> <p>Creating a sprite</p> <p>Now you should have a new Sprite!</p> <p></p> <p>The Sprite Editor</p> <p></p> <p>The sprite in the Asset Browser</p>"},{"location":"tutorials/shape_shooter/step2/#renaming-sprites","title":"Renaming Sprites","text":"<p>Let's name our sprite \"spr_player\". You can rename your sprite by clicking the box in the top-left of it's window, or by double-clicking on the item in the Asset Browser</p> <p>Tip</p> <p>It is recommended to follow  GameMaker Studio's naming guidelines. Sprite names should always begin with \"spr_\" to signify that it is a sprite. This becomes extremely handy when using auto-complete while writing code, as all the sprites will be grouped together.</p> <p></p> <p>Our renamed sprite</p>"},{"location":"tutorials/shape_shooter/step2/#resizing-sprites","title":"Resizing Sprites","text":"<p>Before we jump into making the sprite, lets quickly resize our canvas size. 64 x 64 pixels is a bit big for our use case today.</p> <p>Click on the  icon on the left-hand side of the sprite editor, and adjust the values to 32 x 32 pixels.</p> <p></p> <p>Here we can see the current size of the sprite. Lets click the button and resize it.</p> <p></p> <p>Set the width and height values to 32, and click \"Apply\".</p> <p>If \"Maintain Aspect Ratio\" is checked, you will only have to change one of the values. The other should follow suit.</p> <p></p> <p>Now our sprite is resized</p> <p>Now we can create our player sprite!</p>"},{"location":"tutorials/shape_shooter/step2/#the-sprite-editor","title":"The Sprite Editor","text":"<p>Click on the \"Edit Image\" button on the left-hand side to open the Sprite Editor.</p> <p></p> <p>Open the Sprite Editor using the \"Edit Image\" button</p> <p></p> <p>The Sprite Editor </p> <p>Quote</p> <p>If you get this reference, you get a cookie! \ud83c\udf6a (1)</p> <ol> <li>Here's a hint: You gotta think with Portals...</li> </ol> <p>Now, don't be alarmed, alright? Although, if you do feel alarm, try to hold onto that feeling because that is the proper reaction to being told you have brain damage...</p> <p>...or that you have to use the  GameMaker Studio Sprite Editor...</p> <p>In all seriousness, it's not as bad as it looks.</p> <p>Other options:</p> <ul> <li> Aseprite</li> <li>Pixilart.com</li> <li>Piscel</li> </ul>"},{"location":"tutorials/shape_shooter/step2/#the-grid-overlay","title":"The  Grid Overlay","text":"<p>To make drawing symmetrical shapes easier, lets enable the grid overlay. Simply click on the  button to enable the grid, and use the drop-down menu to customise.</p> <p></p> <p>32 (sprite size) / 4 (grid size) = 8 (grid size in pixels)</p>"},{"location":"tutorials/shape_shooter/step2/#common-tools","title":"Common Tools","text":"Tool Description Shortcut  Paintbrush Draw freely <code>D</code>  Erase Erase pixels back to transparent <code>E</code>  Fill Fill the selected area with colour <code>F</code>  Line Draws a line between 2 points <code>L</code>  Rectangle Draws an outlined or filled rectangle <code>R</code>  Ellipse Draws an outlined or filled ellipse <code>C</code>  Polygon Draws an outlined or filled polygon with the given points <code>P</code>  Colour Picker Selects the colour of the selected pixel <code>O</code>"},{"location":"tutorials/shape_shooter/step2/#the-player","title":"The Player","text":"<p>For the player, I used a few line segments to create a simple, triangular design.</p> <p></p> <p>\"Here's one I made earlier \" ahh sprite</p> <p>Note</p> <p>For a reason that is far above my pay grade,  GameMaker Studio has 0<sup>o</sup> facing toward the left, instead of upwards. This means you have to draw your sprites facing to the left if they are in a top-down perspective, like here.</p>"},{"location":"tutorials/shape_shooter/step2/#the-rest","title":"The Rest","text":"<p>Now that we have our player, we can create the shapes we are going to shoot. Follow the same process as before to create 3 different sized shapes, and a bullet sprite. Feel free to use a different sprite to make your shapes bigger.</p> <p></p> <p>Small (32x32), Medium (64x64), Large (128x128), and the bullet (8x8)</p>"},{"location":"tutorials/shape_shooter/step2/#sprite-origins","title":"Sprite Origins","text":"<p>By default, sprites will have their origin point in the top-left corner. If you expect the sprite to rotate around it's center, then we need to change the position of the origin point.</p> <p>We can do this by clicking the drop-down menu in the top-right corner of the sprite window</p> <p></p> <p>Here we can select 9 pre-defined positions for the origin. You can select a custom location, but that's for another time.</p> <p>Now, lets put these sprites to use!</p>"},{"location":"tutorials/shape_shooter/step2/#objects","title":"Objects","text":"<p>Lets start creating the player. To do so, we need to create an Object, and name it \"obj_player\".</p> <p>Tip</p> <p>Just like with sprites, objects follow  GameMaker Studio's naming guidelines. Object names should always begin with \"obj_\" to signify that it is an object.</p> <p></p> <p>Objects are made the same way as sprites, just use the correct folder,</p> <p></p> <p>Your created object should look like this. Don't be alarmed!</p> <p>Now let's give the player the sprite we created earlier. Click on the \"No Sprite\" button, and select the correct sprite from the popup.</p> <p></p> <p>It's like a mini File Explorer! awwwwwww </p> <p>Now do this again a few more times:</p> <ul> <li> <p>obj_bullet: This is the bullet your player will fire.     It should have it's sprite set to \"spr_bullet\"</p> </li> <li> <p>obj_shape: This is the shape we will destroy with our bullets.     It should have it's sprite set to \"spr_shape_large\".     As we shoot at it, it will shrink.</p> </li> <li> <p>obj_game: This is a \"silent\" object that will manage the game, draw UI, keep score, etc.     This does not need a sprite.</p> </li> </ul> <p></p> <p>This should be all the objects you need for this game.</p> <p>Now, lets set up our room...</p>"},{"location":"tutorials/shape_shooter/step3/","title":"Step 3: Creating a Room","text":"<p>Rooms are essentially your game's world. You add things to them, and those things show up on screen.</p>"},{"location":"tutorials/shape_shooter/step3/#not-creating-rooms","title":"(Not) Creating Rooms","text":"<p>New  GameMaker Studio projects come with a room pre-made, so let's use that! If you need to create one, they are done in the same way sprites are.</p> <p></p> <p>A free room? In this economy?</p> <p></p> <p>This is the Room Editor. Do not panic, it's super simple, I promise!</p>"},{"location":"tutorials/shape_shooter/step3/#resizing-rooms","title":"Resizing Rooms","text":"<p>Let's resize the room using the inspector panel on the left hand side. 1000x1000 should suffice for our use case.</p> <p></p> <p>You can resize in the Inspector Panel</p>"},{"location":"tutorials/shape_shooter/step3/#layers","title":"Layers","text":"<p>Looking at the left panel again, near the top, you'll notice two layers that are created by default.</p> <ul> <li> <p>\"Background\": This is a background layer and it's the background (duh).     Usually a colour or an image.</p> </li> <li> <p>\"Instances\": This is an instance layer. This is where your object live.</p> </li> </ul> <p>Click on the \"Instances\" layer to select it, and then drag your player object into the room.</p> <p></p> <p>We've now placed an \"instance\" of our player object into the room</p> <p>Let's do the same for the obj_shape we created, but a couple more times.</p> <p></p> <p>6 Shape objects in the room. pretty big huh?</p> <p>Now if you run the game (by pressing F5, or by pressing the button at the top of the screen) the game will open, but nothing moves...</p> <p>...So let's fix that!</p>"},{"location":"tutorials/shape_shooter/step4/","title":"Step 4: Making the Player Move","text":""}]}